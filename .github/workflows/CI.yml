name: CI
env:
    DEBUG: napi:*
    APP_NAME: free-storage
    MACOSX_DEPLOYMENT_TARGET: "10.13"
on:
    push:
        branches:
            - main
        paths-ignore:
            - "**/*.md"
            - LICENSE
            - "**/*.gitignore"
            - .editorconfig
            - docs/**
    workflow_dispatch:
jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                settings:
                    - host: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                    - host: ubuntu-latest
                      target: i686-unknown-linux-gnu
                      setup: sudo apt-get install -y gcc-multilib
                    - host: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      setup: sudo apt-get install -y gcc-aarch64-linux-gnu
                    - host: ubuntu-latest
                      target: armv7-unknown-linux-gnueabihf
                      setup: sudo apt-get install -y gcc-arm-linux-gnueabihf

                    - host: windows-latest
                      target: x86_64-pc-windows-msvc
                    - host: windows-latest
                      target: i686-pc-windows-msvc
                    # https://github.com/briansmith/ring/issues/1167
                    # - host: windows-latest
                    #   target: aarch64-pc-windows-msvc

                    - host: macos-latest
                      target: x86_64-apple-darwin
                    - host: macos-latest
                      target: aarch64-apple-darwin

        name: stable - ${{ matrix.settings.target }} - node@16
        runs-on: ${{ matrix.settings.host }}
        steps:
            - uses: actions/checkout@v3

            - name: Setup node
              uses: actions/setup-node@v3
              with:
                  node-version: 16
                  check-latest: true
                  cache: yarn

            - uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.settings.target }}

            - name: Setup
              run: |
                  sudo apt-get update
                  ${{ matrix.settings.setup }}
              if: ${{ matrix.settings.setup }}
              shell: bash

            - name: Setup Node x86
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              run: yarn config set supportedArchitectures.cpu "ia32"
              shell: bash

            - name: Install dependencies
              run: yarn install

            - name: Setup node x86
              uses: actions/setup-node@v3
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              with:
                  node-version: 16
                  check-latest: true
                  cache: yarn
                  architecture: x86

            - name: Build
              run: yarn build --target ${{ matrix.settings.target }}
              shell: bash

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: bindings-${{ matrix.settings.target }}
                  path: ${{ env.APP_NAME }}.*.node
                  if-no-files-found: error
    test:
        name: Test bindings on node@${{ matrix.node }}
        needs:
            - build
        strategy:
            fail-fast: false
            matrix:
                node:
                    - "14"
                    - "16"
                    - "18"

        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Setup node
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node }}
                  check-latest: true
                  cache: yarn

            - name: Install dependencies
              run: yarn install

            - name: Download artifacts
              uses: actions/download-artifact@v3
              with:
                  name: bindings-x86_64-unknown-linux-gnu
                  path: .

            - name: List packages
              run: ls -R .
            - name: Test bindings
              run: yarn test

    publish:
        name: Publish
        runs-on: ubuntu-latest
        needs: [test]
        steps:
            - uses: actions/checkout@v3
            - name: Setup node
              uses: actions/setup-node@v3
              with:
                  node-version: 16
                  check-latest: true
                  registry-url: "https://registry.npmjs.org"
                  cache: yarn

            - name: Install dependencies
              run: yarn install

            - name: Download all artifacts
              uses: actions/download-artifact@v3
              with:
                  path: artifacts

            - name: Move artifacts
              run: yarn artifacts

            - name: List packages
              run: ls -R ./npm
              shell: bash

            - name: Publish
              # push a commit with a message like "v1.2.3" to publish a release
              # push a commit with a message like "v1.2.3-beta.1" to publish a prerelease
              run: |
                  if git log -1 --pretty=%B | grep "^v[0-9]\+\.[0-9]\+\.[0-9]\+$";
                  then
                    npm publish --access public
                  elif git log -1 --pretty=%B | grep "^v[0-9]\+\.[0-9]\+\.[0-9]\+";
                  then
                    npm publish --tag next --access public
                  else
                    echo "Not a release, skipping publish"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
