name: CI
env:
    DEBUG: napi:*
    MACOSX_DEPLOYMENT_TARGET: "10.13"
"on":
    push:
        branches:
            - main
        tags-ignore:
            - "**"
        paths-ignore:
            - "**/*.md"
            - LICENSE
            - "**/*.gitignore"
            - .editorconfig
            - docs/**
    pull_request: null
jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                settings:
                    - host: macos-latest
                      target: x86_64-apple-darwin
                      build: |
                          yarn build

                    - host: windows-latest
                      build: |
                          choco install openssl
                          yarn build
                      target: x86_64-pc-windows-msvc

                    - host: windows-latest
                      build: |
                          choco install openssl
                          yarn build --target i686-pc-windows-msvc
                          yarn test
                      target: i686-pc-windows-msvc

                    - host: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
                      build: |-
                          apt-get install -y libssl-dev pkg-config build-essential libudev-dev &&
                          set -e &&
                          yarn build --target x86_64-unknown-linux-gnu

                    - host: macos-latest
                      target: aarch64-apple-darwin
                      build: |
                          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
                          export CC=$(xcrun -f clang);
                          export CXX=$(xcrun -f clang++);
                          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
                          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
                          yarn build --target aarch64-apple-darwin

                    - host: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
                      build: |-
                          apt-get install -y libssl-dev pkg-config build-essential libudev-dev &&
                          set -e &&
                          yarn build --target aarch64-unknown-linux-gnu

                    - host: windows-latest
                      target: aarch64-pc-windows-msvc
                      build: |
                          choco install openssl
                          yarn build --target aarch64-pc-windows-msvc

        name: stable - ${{ matrix.settings.target }} - node@16
        runs-on: ${{ matrix.settings.host }}
        steps:
            - uses: actions/checkout@v3
            - name: Setup node
              uses: actions/setup-node@v3
              if: ${{ !matrix.settings.docker }}
              with:
                  node-version: 16
                  check-latest: true
                  cache: yarn
            - name: Install
              uses: actions-rs/toolchain@v1
              if: ${{ !matrix.settings.docker }}
              with:
                  profile: minimal
                  override: true
                  toolchain: stable
                  target: ${{ matrix.settings.target }}
            - name: Cache cargo
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      .cargo-cache
                      target/
                  key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
            - name: Cache NPM dependencies
              uses: actions/cache@v3
              with:
                  path: .yarn/cache
                  key: npm-cache-build-${{ matrix.settings.target }}-node@16
            - name: Setup toolchain
              run: ${{ matrix.settings.setup }}
              if: ${{ matrix.settings.setup }}
              shell: bash
            - name: Setup node x86
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              run: yarn config set supportedArchitectures.cpu "ia32"
              shell: bash
            - name: Install dependencies
              run: yarn install
            - name: Setup node x86
              uses: actions/setup-node@v3
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              with:
                  node-version: 16
                  check-latest: true
                  cache: yarn
                  architecture: x86
            - name: Build in docker
              uses: addnab/docker-run-action@v3
              if: ${{ matrix.settings.docker }}
              with:
                  image: ${{ matrix.settings.docker }}
                  options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
                  run: ${{ matrix.settings.build }}
            - name: Build
              run: ${{ matrix.settings.build }}
              if: ${{ !matrix.settings.docker }}
              shell: bash
            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: bindings-${{ matrix.settings.target }}
                  path: "@tbn/*.node"
                  if-no-files-found: error
    publish:
        name: Publish
        runs-on: ubuntu-latest
        needs:
            - test-macOS-windows-binding
            - test-linux-x64-gnu-binding
            - test-linux-aarch64-gnu-binding
        steps:
            - uses: actions/checkout@v3
            - name: Setup node
              uses: actions/setup-node@v3
              with:
                  node-version: 16
                  check-latest: true
                  cache: yarn
            - name: Cache NPM dependencies
              uses: actions/cache@v3
              with:
                  path: .yarn/cache
                  key: npm-cache-ubuntu-latest-publish
            - name: Install dependencies
              run: yarn install
            - name: Download all artifacts
              uses: actions/download-artifact@v3
              with:
                  path: artifacts
            - name: Move artifacts
              run: yarn artifacts
            - name: List packages
              run: ls -R ./npm
              shell: bash
            - name: Publish
              run: |
                  if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
                  then
                    echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
                    npm publish --access public
                  elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
                  then
                    echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
                    npm publish --tag next --access public
                  else
                    echo "Not a release, skipping publish"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
